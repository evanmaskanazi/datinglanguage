services:
  # Main Web Service
  - type: web
    name: datinglanguage
    env: python
    buildCommand: pip install --upgrade pip && pip install -r requirements.txt && python verify_imports.py
    startCommand: python init_db.py && gunicorn dating_backend:app --bind 0.0.0.0:$PORT --workers 2 --worker-class gevent --timeout 120
    plan: starter
    healthCheckPath: /api/health
    numInstances: 1
    envVars:
      - key: PYTHON_VERSION
        value: "3.11.10"
      - key: PRODUCTION
        value: "true"
      - key: DATABASE_URL
        fromDatabase:
          name: datinglanguage-db
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: FLASK_APP
        value: "dating_backend.py"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: REDIS_URL
        fromService:
          name: datinglanguage-redis
          property: connectionString
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      - key: SYSTEM_EMAIL
        sync: false
      - key: SYSTEM_EMAIL_PASSWORD
        sync: false
      - key: SMTP_SERVER
        value: "smtp.gmail.com"
      - key: SMTP_PORT
        value: "587"
      - key: APP_BASE_URL
        value: "https://datinglanguage.onrender.com"
      - key: ADMIN_EMAIL
        sync: false
      - key: ADMIN_PASSWORD
        sync: false
      - key: SENTRY_DSN
        sync: false
      - key: FIELD_ENCRYPTION_KEY
        generateValue: true
      - key: GOOGLE_PLACES_API_KEY
        sync: false
      - key: YELP_API_KEY
        sync: false

  # Celery Worker
  - type: worker
    name: datinglanguage-celery
    env: python
    buildCommand: pip install --upgrade pip && pip install -r requirements.txt
    startCommand: ./startup_celery.sh
    plan: starter
    envVars:
      - key: PYTHON_VERSION
        value: "3.11.10"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: C_FORCE_ROOT
        value: "1"
      - key: PRODUCTION
        value: "true"
      - key: DATABASE_URL
        fromDatabase:
          name: datinglanguage-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: datinglanguage-redis
          property: connectionString
      - key: SECRET_KEY
        sync: false
      - key: FLASK_APP
        value: "dating_backend.py"
      - key: SYSTEM_EMAIL
        sync: false
      - key: SYSTEM_EMAIL_PASSWORD
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: FIELD_ENCRYPTION_KEY
        sync: false

  # Celery Beat Scheduler
  - type: worker
    name: datinglanguage-celery-beat
    env: python
    buildCommand: pip install --upgrade pip && pip install -r requirements.txt
    startCommand: celery -A celery_app beat --loglevel=INFO
    plan: starter
    envVars:
      - key: PYTHON_VERSION
        value: "3.11.10"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PRODUCTION
        value: "true"
      - key: DATABASE_URL
        fromDatabase:
          name: datinglanguage-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: datinglanguage-redis
          property: connectionString
      - key: SECRET_KEY
        sync: false
      - key: FLASK_APP
        value: "dating_backend.py"
      - key: FIELD_ENCRYPTION_KEY
        sync: false

  # Redis instance
  - type: redis
    name: datinglanguage-redis
    plan: starter

  # Background Service for Monitoring/Health Checks
  - type: worker
    name: datinglanguage-monitor
    env: python
    buildCommand: pip install --upgrade pip && pip install -r requirements.txt
    startCommand: python -c "import time; [time.sleep(300) for _ in iter(int, 1)]"
    plan: starter
    envVars:
      - key: PYTHON_VERSION
        value: "3.11.10"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PRODUCTION
        value: "true"
      - key: DATABASE_URL
        fromDatabase:
          name: datinglanguage-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: datinglanguage-redis
          property: connectionString

databases:
  - name: datinglanguage-db
    databaseName: datinglanguage
    user: datinglanguage_user
    plan: starter
